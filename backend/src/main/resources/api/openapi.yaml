openapi: 3.0.3
info:
  title: Billiard Club Management API
  description: |
    Comprehensive API for managing billiard clubs, tables, bookings, orders, and billing.
    
    ## Features
    - **Multi-tenant Architecture**: Support for multiple companies and clubs
    - **User Management**: Role-based access control (ADMIN, CLUB_MANAGER, STAFF, CUSTOMER)
    - **Table Management**: Pool tables, snooker, carom with real-time status
    - **Booking System**: Table reservations with time slots
    - **Order Management**: Food, beverages, and services ordering
    - **Billing System**: Integrated billing with multiple payment methods
    - **JWT Authentication**: Secure token-based authentication
    
    ## Authentication
    All protected endpoints require a valid JWT token in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```
    
    ## Multi-tenancy
    The system supports multi-tenancy through company_id and club_id fields.
    Users are associated with specific companies and clubs based on their role.
    
    ## Rate Limiting
    API endpoints are rate-limited to ensure fair usage.
    
  version: 1.0.0
  contact:
    name: ACME Bida Team
    email: support@acme-bida.com
    url: https://acme-bida.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api/v1
    description: Development server
  - url: https://api.acme-bida.com/api/v1
    description: Production server

security:
  - BearerAuth: []

paths:
  # Health Check
  /health:
    get:
      tags:
        - System
      summary: Health check
      description: Check if the API is running and healthy
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: API is unhealthy

  # Authentication
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              username: "admin"
              password: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
            example:
              accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              tokenType: "Bearer"
              expiresIn: 86400
              userInfo:
                id: 1
                username: "admin"
                email: "admin@acme-bida.com"
                role: "ADMIN"
                companyId: 1
                clubId: null
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/health:
    get:
      tags:
        - Authentication
      summary: Auth service health check
      description: Check if the authentication service is running
      responses:
        '200':
          description: Auth service is healthy
          content:
            text/plain:
              schema:
                type: string
                example: "Auth service is running"

  /auth/debug/users:
    get:
      tags:
        - Debug
      summary: Get all users (Debug endpoint)
      description: Retrieve all users in the system (for debugging purposes)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

  # Companies (Multi-tenant)
  /companies:
    get:
      tags:
        - Companies
      summary: Get all companies
      description: Retrieve all companies in the system
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of companies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Company'
            example:
              - id: 1
                name: "ACME Billiard Group"
                address: "123 Main Street, Ho Chi Minh City"
                phone: "+84 28 1234 5678"
                email: "info@acme-bida.com"
                createdAt: "2025-08-16T10:00:00Z"
                updatedAt: "2025-08-16T10:00:00Z"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Insufficient permissions

    post:
      tags:
        - Companies
      summary: Create new company
      description: Create a new company in the system
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCompanyRequest'
            example:
              name: "New Billiard Company"
              address: "456 Business District, Ho Chi Minh City"
              phone: "+84 28 8765 4321"
              email: "contact@newbida.com"
      responses:
        '200':
          description: Company created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Insufficient permissions

  /companies/{id}:
    get:
      tags:
        - Companies
      summary: Get company by ID
      description: Retrieve a specific company by its ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Company ID
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Company details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '404':
          description: Company not found
        '401':
          description: Unauthorized

    put:
      tags:
        - Companies
      summary: Update company
      description: Update an existing company
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Company ID
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCompanyRequest'
      responses:
        '200':
          description: Company updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '404':
          description: Company not found
        '400':
          description: Invalid request data
        '401':
          description: Unauthorized

    delete:
      tags:
        - Companies
      summary: Delete company
      description: Delete a company from the system
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Company ID
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '204':
          description: Company deleted successfully
        '404':
          description: Company not found
        '401':
          description: Unauthorized

  # Users
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve all users in the system
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

  /users/{username}:
    get:
      tags:
        - Users
      summary: Get user by username
      description: Retrieve a specific user by username
      security:
        - BearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          description: Username
          schema:
            type: string
            example: "admin"
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '401':
          description: Unauthorized

  /users/create:
    post:
      tags:
        - Users
      summary: Create new user
      description: Create a new user in the system
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request data
        '401':
          description: Unauthorized

  /users/test/password:
    get:
      tags:
        - Debug
      summary: Test password matching
      description: Test if a raw password matches the stored hash for a user
      security:
        - BearerAuth: []
      parameters:
        - name: rawPassword
          in: query
          required: true
          description: Raw password to test
          schema:
            type: string
            example: "password123"
        - name: username
          in: query
          required: true
          description: Username to test against
          schema:
            type: string
            example: "admin"
      responses:
        '200':
          description: Password test result
          content:
            text/plain:
              schema:
                type: string
                example: "Password matches for admin: true\nStored hash: $2a$10$..."
        '404':
          description: User not found
        '401':
          description: Unauthorized

  /users/test/hash:
    get:
      tags:
        - Debug
      summary: Generate password hash
      description: Generate a BCrypt hash for a given password
      security:
        - BearerAuth: []
      parameters:
        - name: rawPassword
          in: query
          required: true
          description: Raw password to hash
          schema:
            type: string
            example: "password123"
      responses:
        '200':
          description: Generated hash
          content:
            text/plain:
              schema:
                type: string
                example: "$2a$10$ODnJVZ4gqnJP9vPYwkHFFu39gO9S6D78o49j3DAL7vdaanOJBJ3cK"
        '401':
          description: Unauthorized

  # Simple Test Endpoints
  /simple/test:
    get:
      tags:
        - Debug
      summary: Simple test endpoint
      description: Simple endpoint to test basic functionality
      responses:
        '200':
          description: Test successful
          content:
            text/plain:
              schema:
                type: string
                example: "Simple test endpoint working!"

  /simple/health:
    get:
      tags:
        - Debug
      summary: Simple health check
      description: Simple health check endpoint
      responses:
        '200':
          description: Health check successful
          content:
            text/plain:
              schema:
                type: string
                example: "Simple health check working!"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from /auth/login endpoint

  schemas:
    # Authentication
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: User's username
          example: "admin"
        password:
          type: string
          description: User's password
          example: "password123"
          format: password

    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          description: JWT refresh token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        tokenType:
          type: string
          description: Token type
          example: "Bearer"
        expiresIn:
          type: integer
          description: Token expiration time in seconds
          example: 86400
        userInfo:
          $ref: '#/components/schemas/UserInfo'

    UserInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: User ID
          example: 1
        username:
          type: string
          description: Username
          example: "admin"
        email:
          type: string
          description: User's email
          example: "admin@acme-bida.com"
        role:
          type: string
          description: User's role
          enum: [ADMIN, CLUB_MANAGER, STAFF, CUSTOMER]
          example: "ADMIN"
        companyId:
          type: integer
          format: int64
          description: Associated company ID
          example: 1
        clubId:
          type: integer
          format: int64
          description: Associated club ID
          nullable: true
          example: null

    # Companies
    Company:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Company ID
          example: 1
        name:
          type: string
          description: Company name
          example: "ACME Billiard Group"
        address:
          type: string
          description: Company address
          example: "123 Main Street, Ho Chi Minh City"
        phone:
          type: string
          description: Company phone number
          example: "+84 28 1234 5678"
        email:
          type: string
          description: Company email
          example: "info@acme-bida.com"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2025-08-16T10:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2025-08-16T10:00:00Z"

    CreateCompanyRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Company name
          example: "New Billiard Company"
        address:
          type: string
          description: Company address
          example: "456 Business District, Ho Chi Minh City"
        phone:
          type: string
          description: Company phone number
          example: "+84 28 8765 4321"
        email:
          type: string
          description: Company email
          example: "contact@newbida.com"

    UpdateCompanyRequest:
      type: object
      properties:
        name:
          type: string
          description: Company name
          example: "Updated Billiard Company"
        address:
          type: string
          description: Company address
          example: "789 New Address, Ho Chi Minh City"
        phone:
          type: string
          description: Company phone number
          example: "+84 28 9999 8888"
        email:
          type: string
          description: Company email
          example: "updated@newbida.com"

    # Users
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: User ID
          example: 1
        username:
          type: string
          description: Username
          example: "admin"
        email:
          type: string
          description: User's email
          example: "admin@acme-bida.com"
        passwordHash:
          type: string
          description: Hashed password (not returned in responses)
          example: "$2a$10$..."
        role:
          type: string
          description: User's role
          enum: [ADMIN, CLUB_MANAGER, STAFF, CUSTOMER]
          example: "ADMIN"
        companyId:
          type: integer
          format: int64
          description: Associated company ID
          example: 1
        clubId:
          type: integer
          format: int64
          description: Associated club ID
          nullable: true
          example: null
        isActive:
          type: boolean
          description: Whether the user account is active
          example: true
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2025-08-16T10:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2025-08-16T10:00:00Z"

    CreateUserRequest:
      type: object
      required:
        - username
        - email
        - passwordHash
        - role
      properties:
        username:
          type: string
          description: Username
          example: "newuser"
        email:
          type: string
          description: User's email
          example: "newuser@acme-bida.com"
        passwordHash:
          type: string
          description: Password (will be hashed)
          example: "password123"
        role:
          type: string
          description: User's role
          enum: [ADMIN, CLUB_MANAGER, STAFF, CUSTOMER]
          example: "STAFF"
        companyId:
          type: integer
          format: int64
          description: Associated company ID
          example: 1
        clubId:
          type: integer
          format: int64
          description: Associated club ID
          nullable: true
          example: null

    # System
    HealthResponse:
      type: object
      properties:
        service:
          type: string
          description: Service name
          example: "Bida Club Management API"
        version:
          type: string
          description: API version
          example: "1.0.0"
        status:
          type: string
          description: Service status
          enum: [UP, DOWN]
          example: "UP"
        timestamp:
          type: string
          format: date-time
          description: Health check timestamp
          example: "2025-08-16T16:08:59.387357344"

    # Error Responses
    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
          example: "2025-08-16T16:08:59.387357344"
        status:
          type: integer
          description: HTTP status code
          example: 400
        error:
          type: string
          description: Error type
          example: "Bad Request"
        message:
          type: string
          description: Error message
          example: "Invalid request data"
        path:
          type: string
          description: Request path
          example: "/api/v1/auth/login"

tags:
  - name: Authentication
    description: User authentication and authorization endpoints
  - name: Companies
    description: Company management endpoints
  - name: Users
    description: User management endpoints
  - name: System
    description: System health and status endpoints
  - name: Debug
    description: Debug and testing endpoints
